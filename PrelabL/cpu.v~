module yMux1(z, a, b, c); 
output z; 
input a, b, c; 
wire notC, upper, lower; 
not my_not(notC, c); 
and upperAnd(upper, a, notC); 
and lowerAnd(lower, c, b); 
or my_or(z, upper, lower); 
endmodule 
module yMux2(z, a, b, c); 
output [1:0] z; 
input [1:0] a, b; 
input c; 
yMux1 upper(z[0], a[0], b[0], c); 
yMux1 lower(z[1], a[1], b[1], c); 
endmodule 

module yMux3(z, a, b, c);
parameter SIZE = 2;//similar to constant
output [SIZE-1:0] z;
input [SIZE-1:0] a, b;
input c;

yMux1 funny0[SIZE-1:0](z, a, b, c);
//return [1:0] z a b ,whereas(Ran2E2) as declared as a single bit but replicated

endmodule
module yMux4(z, a0,a1,a2,a3, c); 

parameter SIZE = 2; 
output [SIZE-1:0] z; 
input [SIZE-1:0] a0, a1, a2, a3; 
input [1:0] c; 
wire [SIZE-1:0] zLo, zHi;
 
yMux3 #(SIZE) lo(zLo, a0, a1, c[0]); 
yMux3 #(SIZE) hi(zHi, a2, a3, c[0]); 
yMux3 #(SIZE) final(z, zLo, zHi, c[1]); 

endmodule 
module yadder5(z, cout, a, b, cin); 
output z, cout; 
input a, b, cin; 

xor left_xor(tmp, a, b); 
xor right_xor(z, cin, tmp); 
and left_and(outL, a, b); 
and right_and(outR, tmp, cin); 
or my_or(cout, outR, outL); 

endmodule 
module yadder6(z, cout, a, b, cin); 

output [31:0] z; 
output cout; 
input [31:0] a, b; 
input cin; 
wire[31:0] in, out; 

yadder5 mine[31:0](z, out, a, b, in); 

assign in[0] = cin;
assign in[1] = out[0];
assign in[2] = out[1];
assign in[3] = out[2];
assign in[4] = out[3];
assign in[5] = out[4];
assign in[6] = out[5];
assign in[7] = out[6];
assign in[8] = out[7];
assign in[9] = out[8];
assign in[10] = out[9];
assign in[11] = out[10];
assign in[12] = out[11];
assign in[13] = out[12];
assign in[14] = out[13];
assign in[15] = out[14];
assign in[16] = out[15];
assign in[17] = out[16];
assign in[18] = out[17];
assign in[19] = out[18];
assign in[20] = out[19];
assign in[21] = out[20];
assign in[22] = out[21];
assign in[23] = out[22];
assign in[24] = out[23];
assign in[25] = out[24];
assign in[26] = out[25];
assign in[27] = out[26];
assign in[28] = out[27];
assign in[29] = out[28];
assign in[30] = out[29];
assign in[31] = out[30];
assign cout = out[31];

endmodule
module yArith(z, cout, a, b, ctrl);
output[31:0] z;
output cout;
input[31:0] a, b;
input ctrl;

wire[31:0] in, out, notB, tempB;

not switch[31:0](notB, b);
defparam usagi.SIZE = 32;
yMux3 usagi(tempB, b, notB, ctrl);
yadder5 hahaha[31:0](z, out, a, tempB, in);

assign in[0] = ctrl;
assign in[1] = out[0];
assign in[2] = out[1];
assign in[3] = out[2];
assign in[4] = out[3];
assign in[5] = out[4];
assign in[6] = out[5];
assign in[7] = out[6];
assign in[8] = out[7];
assign in[9] = out[8];
assign in[10] = out[9];
assign in[11] = out[10];
assign in[12] = out[11];
assign in[13] = out[12];
assign in[14] = out[13];
assign in[15] = out[14];
assign in[16] = out[15];
assign in[17] = out[16];
assign in[18] = out[17];
assign in[19] = out[18];
assign in[20] = out[19];
assign in[21] = out[20];
assign in[22] = out[21];
assign in[23] = out[22];
assign in[24] = out[23];
assign in[25] = out[24];
assign in[26] = out[25];
assign in[27] = out[26];
assign in[28] = out[27];
assign in[29] = out[28];
assign in[30] = out[29];
assign in[31] = out[30];
assign cout = out[31];

endmodule

module yAlu32(z, ex, a, b, op);
output[31:0] z;
output ex;
input[31:0] a, b;
input[2:0] op;

wire[31:0] result0, result1, result23, f1, f2, slt, minus;
wire[15:0] z16;
wire[7:0] z8;
wire[3:0] z4;
wire[1:0] z2;
wire lor;
wire adderCOut;
wire ctrlArith;
wire condition;
wire resultSlt;
/*
0	000	a&b
1	001	a|b
2	010	a+b
3	110	a-b
4	111	slt (set a less than b)
*/

//a&b
and op0[31:0](result0, a, b);

//a|b
or	op1[31:0](result1, a, b);

//a +- b
yArith op23[31:0](result23, adderCOuer, a, b, ctrlArith);

//slt
xor op4a(condition, a[31], b[31]);
yArith op4b(minus, null, a, b, 1'b1);
yMux3 #(.SIZE(1)) op4i(resultSlt, minus[31], a[31], condition);

//ALU
yMux3 #(.SIZE(32)) fi1(f1, result0, result1, op[0]);
yMux3 #(.SIZE(32)) fi2(f2, f1, result23, op[1]);
yMux3 #(.SIZE(32)) fi3(z, f2, slt, op[0]);

//Exception
or or16[15:0] (z16, z[15:0], z[31:16]);
or or8[7:0] (z8, z16[7:0], z16[15:8]);
or or4[3:0] (z4, z8[3:0], z8[7:4]);
or or2[1:0] (z2, z4[1:0], z4[3:2]);
or lor (lor, z2[0], z2[1]);
not (ex, lor);

//Connections
assign ctrlArith = op[2];
assign slt[31:1] = 0;
assign slt[0] = resultSlt;

endmodule

